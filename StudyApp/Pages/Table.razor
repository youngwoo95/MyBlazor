@page "/table"
@using StudyApp.Data;
@inject IJSRuntime JSRuntime

<PageTitle>테이블 그리기 예제</PageTitle>

<style>

    .main_container {
        width: 100%;
        height: 100%;
        padding: 30px;
        display: flex;
        flex-direction: row;
        background-color: #edece8;
        box-sizing:border-box;
    }

    table{
        width:100%;
        height:100%;
        border-collapse: collapse;
    }
    th{
        border-bottom: 1px dashed black;
        text-align: center;
        height:50px;
    }

    td{
        border-bottom: 1px solid black;
        text-align:center;
        height:40px;
    }

    #chkbox{
        width:30px;
    }

    

    #ordbox{
        width:100px;
    }

    #title{
        width:100px;
    }

    #name{
        width: 200px;
    }

    #content{
        width:800px;
    }

    #create{
        width:150px;
    }

    .btnbox{
        display:flex;
        flex-direction:row;
        justify-content:end;
        width:100%;
    }

    .boxitem{
        display:block;
    }

</style>

<EditForm Model="@table">
    <div class="main_container">
        <table>
            <tr>
                <th><input id="allcheckbox" type="checkbox" onclick="@(()=>btnAll("allcheckbox"))" /></th>
                <th id="ordbox">순서</th>
                <th id="title">제목</th>
                <th id="name">작성자</th>
                <th id="content">내용</th>
                <th id="create">일자</th>
            </tr>
            @* 블레이저 반복문 처리방법 [1] *@
        
            @foreach(var item in table)
            {
            <tr>
                @*<td id="chkbox"><input name="checkbox" type="checkbox" onclick="@(()=>btnEdit(item.Index))"/></td>*@
                <td id="chkbox"><input name="checkbox" type="checkbox" onclick="@(()=>CheckClick(item))"/></td>
                <td id="ordbox">@item.Index</td>
                <td id="title">제목입니다1</td>
                <td id="name">김김김</td>
                <td id="content">내용요요요요요요용요용</td>
                <td id="create">2023-09-01</td>
            </tr>
            }
        
            @* 블레이저 반복문 처리방법 [2] *@
            @*
            @for(int i = 0; i < table.Count; i++)
            {
                var index = i;
                <tr>
                    <td id="chkbox"><input type="checkbox" onclick="@(()=>btnEdit(index))" /></td>
                    <td id="ordbox">@table[i].Index</td>
                    <td id="title">제목입니다1</td>
                    <td id="name">김김김</td>
                    <td id="content">내용요요요요요요용요용</td>
                    <td id="create">2023-09-01</td>
                </tr>
            }
            *@
        </table>
    </div>

    <div class="btnbox">
        <div class="boxitem">
            <button class="btn btn-primary" style="width:100px" @onclick="@(()=>btnAdd(table))">추가</button>
            <button id="editbox" class="btn btn-success" style="width:100px" @onclick="@(()=>btnEdit(table))">수정</button>
            <button class="btn btn-danger" style="width:100px" @onclick="@(()=> btnDelete(table))">삭제</button>
        </div>
    </div>

</EditForm>


@code {
    List<TableModel> table = new List<TableModel>();

    protected override void OnInitialized()
    {
        for (int i = 0; i < 10; i++)
        {
            table.Add(new TableModel()
            {
                isChecked=false,
                Index = i + 1,
                Title = "제목입니다",
                User = "김김김",
                Content = "내용입니다",
            });
        }
    }

    private async Task CheckClick(TableModel model)
    {
        await JSRuntime.InvokeAsync<object>("boxview");

        model.isChecked = !model.isChecked;
    }

    private async Task btnAll(string id)
    {
        //await JSRuntime.InvokeAsync<object>("StartJs", "name");

        var temp = await JSRuntime.InvokeAsync<object>("createAlert", id);

        if (Convert.ToBoolean(temp.ToString()))
        {
            foreach(var item in table)
            {
                item.isChecked = true;
            }
        }
        else
        {
            foreach(var item in table)
            {
                item.isChecked = false;
            }
        }
    }

    // 추가버튼
    private async Task btnAdd(List<TableModel> model)
    {
        await JSRuntime.InvokeAsync<object>("alert", "추가화면으로 이동");
    }

    // 얘는 하나만 나와야됨.
    private async Task btnEdit(List<TableModel> model)
    {
        var list = model.FirstOrDefault(p => p.isChecked == true);

        bool result = await JSRuntime.InvokeAsync<bool>("confirm", $"{list.Index}번 글을 정말로 수정하시겠습니까?");
        if (result)
        {
            // 수정함
            await JSRuntime.InvokeAsync<object>("alert", "수정화면으로 이동");
        }
        else
        {
            // 수정안함
        }

    }

    // 삭제버튼
    private async Task btnDelete(List<TableModel> model)
    {
        var list = model.Where(p => p.isChecked == true).ToList();

        // 테스트 내용 - 화면표시용
        if (list.Count > 0)
        {
            string test = string.Empty;
            for (int i = 0; i < list.Count; i++)
            {
                test += list[i].Index + ",";
            }
            test = test.TrimEnd(','); // 마지막문자 제거
            await JSRuntime.InvokeAsync<bool>("confirm", $"{test}번 글을 정말로 삭제하시겠습니까?");
        }
    }
}
